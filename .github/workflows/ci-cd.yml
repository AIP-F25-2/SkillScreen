# ⚠️ SAMPLE GITHUB WORKFLOW - CUSTOMIZE FOR YOUR CI/CD REQUIREMENTS
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint Python code
      run: |
        flake8 backend/ services/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ services/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint TypeScript/JavaScript code
      run: |
        cd frontend
        npm run lint
    
    - name: Test Python services
      run: |
        for service in backend/* services/*; do
          if [ -f "$service/requirements.txt" ]; then
            echo "Testing $service..."
            cd "$service"
            pip install -r requirements.txt
            python -m pytest tests/ -v --cov=src --cov-report=xml || true
            cd - > /dev/null
          fi
        done
    
    - name: Test Frontend
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/*/coverage.xml,./services/*/coverage.xml,./frontend/coverage/lcov.info

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Test Docker images
      run: |
        docker-compose up -d
        sleep 30
        docker-compose ps
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
